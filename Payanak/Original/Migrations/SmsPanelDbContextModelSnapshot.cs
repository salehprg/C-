// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.Migrations
{
    [DbContext(typeof(SmsPanelDbContext))]
    partial class SmsPanelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Backend.Models.AccountInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("BusinessPhone")
                        .HasColumnName("businessPhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("FormDate")
                        .HasColumnName("formDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormGuid")
                        .HasColumnName("formGuid")
                        .HasColumnType("text");

                    b.Property<string>("HomePhone")
                        .HasColumnName("homePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("LastLogin")
                        .HasColumnName("lastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AccountInfo","um");

                    b.HasComment("Default Table For User Login Info");
                });

            modelBuilder.Entity("Backend.Models.AdditionalInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("InstagramLink")
                        .HasColumnName("instagramLink")
                        .HasColumnType("text");

                    b.Property<bool?>("IsSpecialDateChanged")
                        .HasColumnName("isSpecialDateChanged")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SpecialDate")
                        .HasColumnName("specialDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("SpecialDateCounter")
                        .HasColumnType("smallint");

                    b.Property<string>("TelegramLink")
                        .HasColumnName("telegramLink")
                        .HasColumnType("text");

                    b.HasKey("UserId")
                        .HasName("AdditionalInfo_pkey");

                    b.ToTable("AdditionalInfo","um");

                    b.HasComment("User Additional Information");
                });

            modelBuilder.Entity("Backend.Models.AddressInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId")
                        .HasName("AddressInfo_pkey");

                    b.ToTable("AddressInfo","um");

                    b.HasComment("User Address Info");
                });

            modelBuilder.Entity("Backend.Models.BusinessCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("GroupId")
                        .HasColumnName("groupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnName("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessCard","sms");

                    b.HasComment("اطلاعات مربوط به کارت ویزیت");
                });

            modelBuilder.Entity("Backend.Models.CalendarEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DateDay")
                        .HasColumnType("integer");

                    b.Property<string>("DayName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IsClose")
                        .HasColumnType("text");

                    b.Property<int>("MonthId")
                        .HasColumnType("integer");

                    b.Property<string>("MonthName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CalendarEvents99");
                });

            modelBuilder.Entity("Backend.Models.CreditInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Credit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("credit")
                        .HasColumnType("numeric(20,2)")
                        .HasDefaultValueSql("0");

                    b.Property<short?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discount")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("0");

                    b.HasKey("UserId")
                        .HasName("CreditInfo_pkey");

                    b.ToTable("CreditInfo","sms");
                });

            modelBuilder.Entity("Backend.Models.DeviceInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Browser")
                        .HasColumnName("browser")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IpAddress")
                        .HasColumnName("ipAddress")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnName("lastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Os")
                        .HasColumnName("os")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Platform")
                        .HasColumnName("platform")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId")
                        .HasName("DeviceInfo_pkey");

                    b.ToTable("DeviceInfo","um");

                    b.HasComment("User Device Info");
                });

            modelBuilder.Entity("Backend.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Descriptions")
                        .HasColumnName("descriptions")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long>("Owner")
                        .HasColumnName("owner")
                        .HasColumnType("bigint");

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("text");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.ToTable("Group","um");

                    b.HasComment("table for users group");
                });

            modelBuilder.Entity("Backend.Models.NumberInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnName("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShared")
                        .HasColumnName("isShared")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastReceivedId")
                        .HasColumnName("lastReceivedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("Owner")
                        .HasColumnName("owner")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.ToTable("NumberInfo","sms");

                    b.HasComment("اطلاعات مربوط به شماره های خدماتی و  پیام انبوه");
                });

            modelBuilder.Entity("Backend.Models.PanelInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("GroupId")
                        .HasColumnName("groupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("HasForm")
                        .HasColumnName("hasForm")
                        .HasColumnType("boolean");

                    b.Property<string>("HashId")
                        .HasColumnName("hashId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsBlocked")
                        .HasColumnName("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnName("lastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasColumnName("version")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PanelInfo","sms");

                    b.HasComment("اطلاعات مربوط به پنل های پایانک");
                });

            modelBuilder.Entity("Backend.Models.PanelVersionInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("MaxVersion")
                        .HasColumnName("maxVersion")
                        .HasColumnType("numeric(20,2)");

                    b.Property<decimal?>("MinVersion")
                        .HasColumnName("minVersion")
                        .HasColumnType("numeric(20,2)");

                    b.Property<string>("NickName")
                        .HasColumnName("nickName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PanelVersionInfo","sms");

                    b.HasComment("اطلاعات ورژن پنل ها");
                });

            modelBuilder.Entity("Backend.Models.Permissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("Level")
                        .HasColumnName("level")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("Parent")
                        .HasColumnName("parent")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Permissions","um");

                    b.HasComment("Site Permissions");
                });

            modelBuilder.Entity("Backend.Models.PersonalInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("BirthdayChangeCounter")
                        .HasColumnName("birthdayChangeCounter")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsBirthdayChanged")
                        .HasColumnName("isBirthdayChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NationalCode")
                        .HasColumnName("nationalCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NickName")
                        .HasColumnName("nickName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId")
                        .HasName("PersonalInfo_pkey");

                    b.ToTable("PersonalInfo","um");

                    b.HasComment("User Personal Information");
                });

            modelBuilder.Entity("Backend.Models.PersonalTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PersonalTemplate","sms");

                    b.HasComment("تمپلیت های ساخته شده توسط کاربر برای ارسال پیام");
                });

            modelBuilder.Entity("Backend.Models.ReceiveInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<long?>("Count")
                        .HasColumnName("count")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MsgId")
                        .HasColumnName("msgId")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Receiver")
                        .HasColumnName("receiver")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Sender")
                        .HasColumnName("sender")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ReceiveInfo","sms");

                    b.HasComment("لیست پیام های دریافتی");
                });

            modelBuilder.Entity("Backend.Models.RolePermissions", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnName("roleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnName("permissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("RolePermissions_pkey");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions","um");

                    b.HasComment("Role Permissions");
                });

            modelBuilder.Entity("Backend.Models.Roles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool?>("CanDelete")
                        .HasColumnName("canDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanEdit")
                        .HasColumnName("canEdit")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Roles","um");

                    b.HasComment("Site Roles");
                });

            modelBuilder.Entity("Backend.Models.ScheduleSmsDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("Counter")
                        .HasColumnName("counter")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("updatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ScheduleSmsDetail","sms");

                    b.HasComment("اطلاعات کاربران یک ارسال زماندار");
                });

            modelBuilder.Entity("Backend.Models.ScheduleSmsInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("AddedDay")
                        .HasColumnName("addedDay")
                        .HasColumnType("integer");

                    b.Property<int?>("AddedMonth")
                        .HasColumnName("addedMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("AddedYear")
                        .HasColumnName("addedYear")
                        .HasColumnType("integer");

                    b.Property<long?>("Code")
                        .HasColumnName("code")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ScheduleSmsInfo","sms");

                    b.HasComment("اطلاعات پیام زمان دار");
                });

            modelBuilder.Entity("Backend.Models.SentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<long?>("CalculatedCount")
                        .HasColumnName("calculatedCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("Count")
                        .HasColumnName("count")
                        .HasColumnType("bigint");

                    b.Property<string>("Deliveries")
                        .HasColumnName("deliveries")
                        .HasColumnType("text");

                    b.Property<string>("GroupIds")
                        .HasColumnName("groupIds")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Kind")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kind")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Numbers")
                        .HasColumnName("numbers")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(20,2)");

                    b.Property<string>("RectIds")
                        .HasColumnName("rectIds")
                        .HasColumnType("text");

                    b.Property<string>("SendNumber")
                        .HasColumnName("sendNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SentDate")
                        .HasColumnName("sentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SentInfo","sms");

                    b.HasComment("برا مشاهده پیام های ارسال شده");
                });

            modelBuilder.Entity("Backend.Models.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("FormKey")
                        .HasColumnName("formKey")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormMessage")
                        .HasColumnName("formMessage")
                        .HasColumnType("text");

                    b.Property<long?>("LastRecivedSmsId")
                        .HasColumnName("lastRecivedSmsId")
                        .HasColumnType("bigint");

                    b.Property<short?>("SmsDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("smsDiscount")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("SmsPrice")
                        .HasColumnName("smsPrice")
                        .HasColumnType("numeric(20,2)");

                    b.HasKey("Id");

                    b.ToTable("Settings","sms");
                });

            modelBuilder.Entity("Backend.Models.TaskInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Guid")
                        .HasColumnName("guid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<int?>("Percent")
                        .HasColumnName("percent")
                        .HasColumnType("integer");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TaskInfo","sms");

                    b.HasComment("اطلاعات تسک های کامل شده در سایت");
                });

            modelBuilder.Entity("Backend.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("Responder")
                        .HasColumnName("responder")
                        .HasColumnType("bigint");

                    b.Property<short>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Ticket","um");

                    b.HasComment("لیست تیکت های ساخته شده");
                });

            modelBuilder.Entity("Backend.Models.TicketDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("SendDate")
                        .HasColumnName("sendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("SenderId")
                        .HasColumnName("senderId")
                        .HasColumnType("bigint");

                    b.Property<short>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long>("TicketId")
                        .HasColumnName("ticketId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TicketDetail","um");

                    b.HasComment("پیام های ارسال شده در تیکت");
                });

            modelBuilder.Entity("Backend.Models.UserGroups", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnName("groupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "GroupId")
                        .HasName("UserGroups_pkey");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups","um");

                    b.HasComment("Assigned groups to user");
                });

            modelBuilder.Entity("Backend.Models.UserRoles", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnName("roleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId")
                        .HasName("UserRoles_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","um");

                    b.HasComment("User Roles");
                });

            modelBuilder.Entity("Backend.Models.VwBusinessCard", b =>
                {
                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Credit")
                        .HasColumnName("credit")
                        .HasColumnType("numeric(20,2)");

                    b.Property<short?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnName("formGuid")
                        .HasColumnType("text");

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<long?>("GroupId")
                        .HasColumnName("groupId")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .HasColumnName("groupName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GroupPicture")
                        .HasColumnName("groupPicture")
                        .HasColumnType("text");

                    b.Property<short?>("GroupStatus")
                        .HasColumnName("groupStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("GroupTitle")
                        .HasColumnName("groupTitle")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnName("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsFormValid")
                        .HasColumnName("isFormValid")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("NickName")
                        .HasColumnName("nickName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("NumberIsBlocked")
                        .HasColumnName("numberIsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NumberIsShared")
                        .HasColumnName("numberIsShared")
                        .HasColumnType("boolean");

                    b.Property<long?>("NumberOwner")
                        .HasColumnName("numberOwner")
                        .HasColumnType("bigint");

                    b.Property<string>("NumberPassword")
                        .HasColumnName("numberPassword")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NumberSend")
                        .HasColumnName("numberSend")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("NumberType")
                        .HasColumnName("numberType")
                        .HasColumnType("smallint");

                    b.Property<string>("NumberUsername")
                        .HasColumnName("numberUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<string>("TemplateBody")
                        .HasColumnName("templateBody")
                        .HasColumnType("text");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<string>("TemplateName")
                        .HasColumnName("templateName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwBusinessCard","sms");

                    b.HasComment("اطلاعات کامل کارت ویزیت");
                });

            modelBuilder.Entity("Backend.Models.VwContact", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Credit")
                        .HasColumnName("credit")
                        .HasColumnType("numeric(20,2)");

                    b.Property<short?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnName("formGuid")
                        .HasColumnType("text");

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("InstagramLink")
                        .HasColumnName("instagramLink")
                        .HasColumnType("text");

                    b.Property<int?>("IsFormValid")
                        .HasColumnName("isFormValid")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("NickName")
                        .HasColumnName("nickName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("SpecialDate")
                        .HasColumnName("specialDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TelegramLink")
                        .HasColumnName("telegramLink")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwContact","um");
                });

            modelBuilder.Entity("Backend.Models.VwContactGroups", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descriptions")
                        .HasColumnName("descriptions")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnName("formGuid")
                        .HasColumnType("text");

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<long?>("GroupId")
                        .HasColumnName("groupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("InstagramLink")
                        .HasColumnName("instagramLink")
                        .HasColumnType("text");

                    b.Property<int?>("IsFormValid")
                        .HasColumnName("isFormValid")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NickName")
                        .HasColumnName("nickName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("Owner")
                        .HasColumnName("owner")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SpecialDate")
                        .HasColumnName("specialDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<string>("TelegramLink")
                        .HasColumnName("telegramLink")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwContactGroups","um");
                });

            modelBuilder.Entity("Backend.Models.VwNumber", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnName("formGuid")
                        .HasColumnType("text");

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnName("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsFormValid")
                        .HasColumnName("isFormValid")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsShared")
                        .HasColumnName("isShared")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("Owner")
                        .HasColumnName("owner")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerUsername")
                        .HasColumnName("ownerUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwNumber","sms");

                    b.HasComment("اطلاعات شماره به همراه مالک");
                });

            modelBuilder.Entity("Backend.Models.VwPanel", b =>
                {
                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnName("formGuid")
                        .HasColumnType("text");

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<string>("GroupDescription")
                        .HasColumnName("groupDescription")
                        .HasColumnType("text");

                    b.Property<long?>("GroupId")
                        .HasColumnName("groupId")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .HasColumnName("groupName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GroupPicture")
                        .HasColumnName("groupPicture")
                        .HasColumnType("text");

                    b.Property<string>("GroupTitle")
                        .HasColumnName("groupTitle")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("HashId")
                        .HasColumnName("hashId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnName("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsFormValid")
                        .HasColumnName("isFormValid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnName("lastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("SendIsBlocked")
                        .HasColumnName("sendIsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SendIsShared")
                        .HasColumnName("sendIsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("SendNumber")
                        .HasColumnName("sendNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SendPassword")
                        .HasColumnName("sendPassword")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("SendType")
                        .HasColumnName("sendType")
                        .HasColumnType("smallint");

                    b.Property<string>("SendUsername")
                        .HasColumnName("sendUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<string>("TemplateBody")
                        .HasColumnName("templateBody")
                        .HasColumnType("text");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<string>("TemplateName")
                        .HasColumnName("templateName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Version")
                        .HasColumnName("version")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwPanel","sms");

                    b.HasComment("اطلاعات کامل پنل ها");
                });

            modelBuilder.Entity("Backend.Models.VwScheduleSms", b =>
                {
                    b.Property<int?>("AddedDay")
                        .HasColumnName("addedDay")
                        .HasColumnType("integer");

                    b.Property<int?>("AddedMonth")
                        .HasColumnName("addedMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("AddedYear")
                        .HasColumnName("addedYear")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Counter")
                        .HasColumnName("counter")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Credit")
                        .HasColumnName("credit")
                        .HasColumnType("numeric(20,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("NickName")
                        .HasColumnName("nickName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerEmail")
                        .HasColumnName("ownerEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerFirstName")
                        .HasColumnName("ownerFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("OwnerGender")
                        .HasColumnName("ownerGender")
                        .HasColumnType("smallint");

                    b.Property<long?>("OwnerId")
                        .HasColumnName("ownerId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerLastName")
                        .HasColumnName("ownerLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerMobilePhone")
                        .HasColumnName("ownerMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OwnerUsername")
                        .HasColumnName("ownerUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("ParentCode")
                        .HasColumnName("parentCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentName")
                        .HasColumnName("parentName")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("SendIsBlocked")
                        .HasColumnName("sendIsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SendIsShared")
                        .HasColumnName("sendIsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("SendNumber")
                        .HasColumnName("sendNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SendPassword")
                        .HasColumnName("sendPassword")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("SendType")
                        .HasColumnName("sendType")
                        .HasColumnType("smallint");

                    b.Property<string>("SendUsername")
                        .HasColumnName("sendUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SpecialDate")
                        .HasColumnName("specialDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("updatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwScheduleSms","sms");

                    b.HasComment("اطلاعات کامل ارسال زماندار");
                });

            modelBuilder.Entity("Backend.Models.VwScheduleSmsInfo", b =>
                {
                    b.Property<int?>("AddedDay")
                        .HasColumnName("addedDay")
                        .HasColumnType("integer");

                    b.Property<int?>("AddedMonth")
                        .HasColumnName("addedMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("AddedYear")
                        .HasColumnName("addedYear")
                        .HasColumnType("integer");

                    b.Property<long?>("Code")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Credit")
                        .HasColumnName("credit")
                        .HasColumnType("numeric(20,2)");

                    b.Property<short?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("smallint");

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("NumberId")
                        .HasColumnName("numberId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerEmail")
                        .HasColumnName("ownerEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerFirstName")
                        .HasColumnName("ownerFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("OwnerGender")
                        .HasColumnName("ownerGender")
                        .HasColumnType("smallint");

                    b.Property<string>("OwnerLastName")
                        .HasColumnName("ownerLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerMobilePhone")
                        .HasColumnName("ownerMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OwnerUsername")
                        .HasColumnName("ownerUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("SendIsBlocked")
                        .HasColumnName("sendIsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SendIsShared")
                        .HasColumnName("sendIsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("SendNumber")
                        .HasColumnName("sendNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SendPassword")
                        .HasColumnName("sendPassword")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("SendType")
                        .HasColumnName("sendType")
                        .HasColumnType("smallint");

                    b.Property<string>("SendUsername")
                        .HasColumnName("sendUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<string>("TemplateBody")
                        .HasColumnName("templateBody")
                        .HasColumnType("text");

                    b.Property<long?>("TemplateId")
                        .HasColumnName("templateId")
                        .HasColumnType("bigint");

                    b.Property<string>("TemplateName")
                        .HasColumnName("templateName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.ToTable("vwScheduleSmsInfo","sms");
                });

            modelBuilder.Entity("Backend.Models.VwTask", b =>
                {
                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("text");

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("Percent")
                        .HasColumnName("percent")
                        .HasColumnType("integer");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("vwTask","sms");
                });

            modelBuilder.Entity("Backend.Models.VwTicket", b =>
                {
                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerEmail")
                        .HasColumnName("ownerEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerFirstName")
                        .HasColumnName("ownerFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("OwnerGender")
                        .HasColumnName("ownerGender")
                        .HasColumnType("smallint");

                    b.Property<string>("OwnerLastName")
                        .HasColumnName("ownerLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerMobilePhone")
                        .HasColumnName("ownerMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OwnerPicture")
                        .HasColumnName("ownerPicture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("OwnerUsername")
                        .HasColumnName("ownerUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("Responder")
                        .HasColumnName("responder")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponderEmail")
                        .HasColumnName("responderEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ResponderFirstName")
                        .HasColumnName("responderFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("ResponderGender")
                        .HasColumnName("responderGender")
                        .HasColumnType("smallint");

                    b.Property<string>("ResponderLastName")
                        .HasColumnName("responderLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ResponderMobilePhone")
                        .HasColumnName("responderMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("ResponderPicture")
                        .HasColumnName("responderPicture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ResponderUsername")
                        .HasColumnName("responderUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.ToTable("vwTicket","um");

                    b.HasComment("اطلاعات کامل تیکت");
                });

            modelBuilder.Entity("Backend.Models.VwTicketDetail", b =>
                {
                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerEmail")
                        .HasColumnName("ownerEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerFirstName")
                        .HasColumnName("ownerFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("OwnerGender")
                        .HasColumnName("ownerGender")
                        .HasColumnType("smallint");

                    b.Property<string>("OwnerLastName")
                        .HasColumnName("ownerLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerMobilePhone")
                        .HasColumnName("ownerMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OwnerPicture")
                        .HasColumnName("ownerPicture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("OwnerUsername")
                        .HasColumnName("ownerUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SendDate")
                        .HasColumnName("sendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SenderEmail")
                        .HasColumnName("senderEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SenderFirstName")
                        .HasColumnName("senderFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("SenderGender")
                        .HasColumnName("senderGender")
                        .HasColumnType("smallint");

                    b.Property<long?>("SenderId")
                        .HasColumnName("senderId")
                        .HasColumnType("bigint");

                    b.Property<string>("SenderLastName")
                        .HasColumnName("senderLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SenderMobilePhone")
                        .HasColumnName("senderMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SenderPicture")
                        .HasColumnName("senderPicture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("SenderUsername")
                        .HasColumnName("senderUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("TicketId")
                        .HasColumnName("ticketId")
                        .HasColumnType("bigint");

                    b.Property<short?>("TicketStatus")
                        .HasColumnName("ticketStatus")
                        .HasColumnType("smallint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.ToTable("vwTicketDetail","um");

                    b.HasComment("اطلاعات کامل پیام تیکت");
                });

            modelBuilder.Entity("Backend.Models.VwTicketLastMessage", b =>
                {
                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<long?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<short?>("MessageStatus")
                        .HasColumnName("messageStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("OwnerEmail")
                        .HasColumnName("ownerEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerFirstName")
                        .HasColumnName("ownerFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("OwnerGender")
                        .HasColumnName("ownerGender")
                        .HasColumnType("smallint");

                    b.Property<string>("OwnerLastName")
                        .HasColumnName("ownerLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerMobilePhone")
                        .HasColumnName("ownerMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OwnerPicture")
                        .HasColumnName("ownerPicture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("OwnerUsername")
                        .HasColumnName("ownerUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("Responder")
                        .HasColumnName("responder")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponderEmail")
                        .HasColumnName("responderEmail")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ResponderFirstName")
                        .HasColumnName("responderFirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("ResponderGender")
                        .HasColumnName("responderGender")
                        .HasColumnType("smallint");

                    b.Property<string>("ResponderLastName")
                        .HasColumnName("responderLastName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ResponderMobilePhone")
                        .HasColumnName("responderMobilePhone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("ResponderPicture")
                        .HasColumnName("responderPicture")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ResponderUsername")
                        .HasColumnName("responderUsername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SendDate")
                        .HasColumnName("sendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SenderId")
                        .HasColumnName("senderId")
                        .HasColumnType("bigint");

                    b.Property<short?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("smallint");

                    b.Property<long?>("TicketId")
                        .HasColumnName("ticketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Unread")
                        .HasColumnName("unread")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("bigint");

                    b.ToTable("vwTicketLastMessage","um");
                });

            modelBuilder.Entity("Backend.Models.AdditionalInfo", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("Backend.Models.AdditionalInfo", "UserId")
                        .HasConstraintName("USER_ID_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.AddressInfo", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithOne("AddressInfo")
                        .HasForeignKey("Backend.Models.AddressInfo", "UserId")
                        .HasConstraintName("USER_ID_FK1")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.CreditInfo", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithOne("CreditInfo")
                        .HasForeignKey("Backend.Models.CreditInfo", "UserId")
                        .HasConstraintName("fk_user_credit")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.DeviceInfo", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("Backend.Models.DeviceInfo", "UserId")
                        .HasConstraintName("USER_ID_FK2")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Group", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "OwnerNavigation")
                        .WithMany("Group")
                        .HasForeignKey("Owner")
                        .HasConstraintName("Group_owner_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.NumberInfo", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "OwnerNavigation")
                        .WithMany("NumberInfo")
                        .HasForeignKey("Owner")
                        .HasConstraintName("fk_user_number");
                });

            modelBuilder.Entity("Backend.Models.PersonalInfo", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithOne("PersonalInfo")
                        .HasForeignKey("Backend.Models.PersonalInfo", "UserId")
                        .HasConstraintName("USER_ID_FK3")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.PersonalTemplate", b =>
                {
                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithMany("PersonalTemplate")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_sms_template");
                });

            modelBuilder.Entity("Backend.Models.RolePermissions", b =>
                {
                    b.HasOne("Backend.Models.Permissions", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("PERMISSION_ID_FK_ROLEPERMISSION")
                        .IsRequired();

                    b.HasOne("Backend.Models.Roles", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("ROLE_ID_FK_ROLEPERMISSION")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.UserGroups", b =>
                {
                    b.HasOne("Backend.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("UserGroups_groupId_fkey")
                        .IsRequired();

                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserGroups_userId_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.UserRoles", b =>
                {
                    b.HasOne("Backend.Models.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("ROLE_ID_FK_USERROLE")
                        .IsRequired();

                    b.HasOne("Backend.Models.AccountInfo", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("USER_ID_FK_USERROLE")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
