<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yort.Ntp</name>
    </assembly>
    <members>
        <member name="T:Yort.Ntp.NtpClient">
            <summary>
            Use instances of this class to request an up to date, accurate time from an NTP server.
            </summary>
        </member>
        <member name="E:Yort.Ntp.NtpClient.TimeReceived">
            <summary>
            Raised when a new time is received from an NTP server.
            </summary>
            <seealso cref="T:Yort.Ntp.NtpTimeReceivedEventArgs"/>
            <seealso cref="M:Yort.Ntp.NtpClient.OnTimeReceived(System.DateTime,System.DateTime)"/>
        </member>
        <member name="E:Yort.Ntp.NtpClient.ErrorOccurred">
            <summary>
            Raised when an error occurs trying to request an updated time from an NTP server.
            </summary>
            <remarks>
            <para>The <see cref="P:Yort.Ntp.NtpNetworkErrorEventArgs.Exception"/> property will usually contain a <see cref="T:Yort.Ntp.NtpNetworkException"/>, indicating the library is working properly but an error (probably network related) occurred. Other exceptions types are possible, and *may* indicate a bug or poor exception handling within the library.</para>
            </remarks>
            <seealso cref="T:Yort.Ntp.NtpNetworkErrorEventArgs"/>
            <seealso cref="T:Yort.Ntp.NtpNetworkException"/>
            <seealso cref="M:Yort.Ntp.NtpClient.OnErrorOccurred(System.Exception)"/>
        </member>
        <member name="M:Yort.Ntp.NtpClient.#ctor">
            <summary>
            Default constructor. Uses the <see cref="F:Yort.Ntp.KnownNtpServers.TimeANist"/> server as a default.
            </summary>
        </member>
        <member name="M:Yort.Ntp.NtpClient.#ctor(System.String)">
            <summary>
            Full constructor.
            </summary>
            <param name="serverAddress">the name or address the NTP server to be used.</param>
        </member>
        <member name="P:Yort.Ntp.NtpClient.ServerAddress">
            <summary>
            Returns the address of the NTP server this client obtains times from.
            </summary>
            <remarks>
            <para>The server address used is provided via the constructor.</para>
            </remarks>
            <seealso cref="M:Yort.Ntp.NtpClient.#ctor"/>
            <seealso cref="M:Yort.Ntp.NtpClient.#ctor(System.String)"/>
        </member>
        <member name="M:Yort.Ntp.NtpClient.BeginRequestTime">
            <summary>
            Asynchronously requests a time from the NTP server specified in the constructor. When a time is received the <seealso cref="E:Yort.Ntp.NtpClient.TimeReceived" /> event is raised with the result, otherwise the <seealso cref="E:Yort.Ntp.NtpClient.ErrorOccurred"/> event should be raised containing details of the failure.
            </summary>
            <remarks>
            <para>Note, events raised by this class may not (and probably will not) occur on the same thread that called this method. If the event handlers call UI components, dispatched invoke may be required.</para>
            <para>This method may throw exceptions (most likely a <seealso cref="T:Yort.Ntp.NtpNetworkException"/> if an error occurs trying to connect/bind to the network endpoint. Exception handling in client code is recommended.</para>
            </remarks>
            <seealso cref="T:Yort.Ntp.NtpNetworkException"/>
            <seealso cref="M:Yort.Ntp.NtpClient.OnTimeReceived(System.DateTime,System.DateTime)"/>
            <seealso cref="M:Yort.Ntp.NtpClient.OnErrorOccurred(System.Exception)"/>
        </member>
        <member name="M:Yort.Ntp.NtpClient.RequestTimeAsync">
            <summary>
            Returns an awaitable task whose result is the current time from the NTP server specified in the constructor.
            </summary>
            <remarks>
            <para>This method may throw exceptions (most likely a <seealso cref="T:Yort.Ntp.NtpNetworkException"/> if an error occurs trying to connect/bind to the network endpoint. Exception handling in client code is recommended.</para>
            </remarks>
            <seealso cref="T:Yort.Ntp.NtpNetworkException"/>
        </member>
        <member name="M:Yort.Ntp.NtpClient.OnTimeReceived(System.DateTime,System.DateTime)">
            <summary>
            Raises the <seealso cref="E:Yort.Ntp.NtpClient.TimeReceived"/> event.
            </summary>
            <remarks>
            <para>This event may be raised on a different thread than called the <see cref="M:Yort.Ntp.NtpClient.BeginRequestTime"/> method. If the event handler refers to UI, COM or other components that require thread affinity then dispatched invoke may be required.</para>
            <para>The time returned is a UTC time.</para>
            </remarks>
            <param name="ntpTime">The date and time received from the NTP server.</param>
            <param name="receivedAt">The (UTC) date and time of the system upon reception.</param>
            <seealso cref="E:Yort.Ntp.NtpClient.TimeReceived"/>
        </member>
        <member name="M:Yort.Ntp.NtpClient.OnErrorOccurred(System.Exception)">
            <summary>
            Raises the <see cref="E:Yort.Ntp.NtpClient.ErrorOccurred"/> event.
            </summary>
            <remarks>
            <para>This event may be raised on a different thread than called the <see cref="M:Yort.Ntp.NtpClient.BeginRequestTime"/> method. If the event handler refers to UI, COM or other components that require thread affinity then dispatched invoke may be required.</para>
            </remarks>
            <param name="exception">A <see cref="T:System.Exception"/> derived instance describing the error.</param>
        </member>
        <member name="M:Yort.Ntp.NtpClient.ExecuteWithSuppressedExceptions(System.Action)">
            <summary>
            Executes a delegate and suppresses any non-fatal exceptions thrown.
            </summary>
            <param name="work"></param>
        </member>
        <member name="T:Yort.Ntp.KnownNtpServers">
            <summary>
            Provides a set of known NTP server addresses.
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.PoolOrg">
            <summary>
            The server address; pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.Asia">
            <summary>
            The server address; asia.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.Europe">
            <summary>
            The server address; europe.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.NorthAmericaOrg">
            <summary>
            The server address; north-america.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.OceaniaOrg">
            <summary>
            The server address; oceania.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.SouthAmericaOrg">
            <summary>
            The server address; south-america.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.TimeANist">
            <summary>
            The server address; time-a.nist.gov
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.NZPool0">
            <summary>
            The server address; 0.nz.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.NZPool1">
            <summary>
            The server address; 1.nz.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.NZPool2">
            <summary>
            The server address; 2.nz.pool.ntp.org
            </summary>
        </member>
        <member name="F:Yort.Ntp.KnownNtpServers.NZPool3">
            <summary>
            The server address; 3.nz.pool.ntp.org
            </summary>
        </member>
        <member name="T:Yort.Ntp.NtpNetworkErrorEventArgs">
            <summary>
            Event arguments for the <see cref="E:Yort.Ntp.NtpClient.ErrorOccurred"/> event, containing details of the error that occurred.
            </summary>
        </member>
        <member name="M:Yort.Ntp.NtpNetworkErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Full constructor.
            </summary>
            <param name="exception">A <see cref="P:Yort.Ntp.NtpNetworkErrorEventArgs.Exception"/> containing details of the network or socket error that occurred.</param>
        </member>
        <member name="P:Yort.Ntp.NtpNetworkErrorEventArgs.Exception">
            <summary>
            Returns a <see cref="P:Yort.Ntp.NtpNetworkErrorEventArgs.Exception"/> containing details of the network or socket error that occurred.
            </summary>
        </member>
        <member name="T:Yort.Ntp.NtpNetworkException">
            <summary>
            Represents a network error that occurred during an NTP operation.
            </summary>
        </member>
        <member name="M:Yort.Ntp.NtpNetworkException.#ctor">
            <summary>
            Default constructor, required by framework. Not recommended for use.
            </summary>
        </member>
        <member name="M:Yort.Ntp.NtpNetworkException.#ctor(System.String)">
            <summary>
            Partial constructor. Provides only a text based description of the error.
            </summary>
            <param name="message">The human readable error message describing the network error.</param>
        </member>
        <member name="M:Yort.Ntp.NtpNetworkException.#ctor(System.String,System.Int32)">
            <summary>
            Partial constructor, recommended. Provides an error message and a socket error code.
            </summary>
            <param name="message">The human readable error message describing the network error.</param>
            <param name="socketErrorCode">An integer specifying a socket error.</param>
        </member>
        <member name="M:Yort.Ntp.NtpNetworkException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Partial constructor, recommended. Provides an error message and a socket error code.
            </summary>
            <param name="message">The human readable error message describing the network error.</param>
            <param name="socketErrorCode">An integer specifying a socket error.</param>
            <param name="inner">The original exception that is wrapped by this exception.</param>
        </member>
        <member name="M:Yort.Ntp.NtpNetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Partial constructor, recommended. Provides an error message, a socket error code and a reference to the original exception.
            </summary>
            <param name="message">The human readable error message describing the network error.</param>
            <param name="inner">The original exception that is wrapped by this exception.</param>
        </member>
        <member name="P:Yort.Ntp.NtpNetworkException.SocketErrorCode">
            <summary>
            Returns the socket error code (as an integer) for the error that occurred.
            </summary>
            <remarks>
            <para>On platforms that support it, this can be cast to the <see cref="T:System.Net.Sockets.SocketError"/> enumeration to determine what the error code means.</para>
            </remarks>
        </member>
        <member name="T:Yort.Ntp.RequestTimeResult">
            <summary>
            Contains the result of an asyncronous time request.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Yort.Ntp.RequestTimeResult.NtpTime">
            <summary>
            Time (UTC) received from network server.
            </summary>
        </member>
        <member name="P:Yort.Ntp.RequestTimeResult.ReceivedAt">
            <summary>
            Time (UTC) of system at reception.
            </summary>
        </member>
        <member name="M:Yort.Ntp.RequestTimeResult.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructs a RequestTimeResult value.
            </summary>
            <remarks>
            </remarks>
            <param name="ntpTime">The date and time received from the NTP server.</param>
            <param name="receivedAt">The (UTC) date and time of the system upon reception.</param>
        </member>
        <member name="M:Yort.Ntp.RequestTimeResult.Equals(System.Object)">
            <summary>
            Tests for equality between objects.
            </summary>
            <remarks>
            </remarks>
            <param name="obj">The other object to compare against.</param>
        </member>
        <member name="M:Yort.Ntp.RequestTimeResult.Equals(Yort.Ntp.RequestTimeResult)">
            <summary>
            Tests for equality between RequestTimeResults.
            </summary>
            <remarks>
            </remarks>
            <param name="other">The other object to compare against.</param>
        </member>
        <member name="M:Yort.Ntp.RequestTimeResult.GetHashCode">
            <summary>
            Get the hash code of the object.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Yort.Ntp.RequestTimeResult.op_Equality(Yort.Ntp.RequestTimeResult,Yort.Ntp.RequestTimeResult)">
            <summary>
            Tests for equality between two RequestTimeResults.
            </summary>
            <remarks>
            </remarks>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
        </member>
        <member name="M:Yort.Ntp.RequestTimeResult.op_Inequality(Yort.Ntp.RequestTimeResult,Yort.Ntp.RequestTimeResult)">
            <summary>
            Tests for inequality between RequestTimeResults.
            </summary>
            <remarks>
            </remarks>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
        </member>
        <member name="T:Yort.Ntp.NtpTimeReceivedEventArgs">
            <summary>
            Event arguments for the <see cref="E:Yort.Ntp.NtpClient.TimeReceived"/> event, providing the updated time.
            </summary>
        </member>
        <member name="M:Yort.Ntp.NtpTimeReceivedEventArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Full constructor.
            </summary>
            <param name="currentTime">The date and time just received from the NTP server.</param>
            <param name="receivedAt">The (UTC) date and time of the local system at reception.</param>
        </member>
        <member name="P:Yort.Ntp.NtpTimeReceivedEventArgs.CurrentTime">
            <summary>
            Returns the (UTC) time returned by the NTP server.
            </summary>
        </member>
        <member name="P:Yort.Ntp.NtpTimeReceivedEventArgs.ReceivedAt">
            <summary>
            Returns the (UTC) time of the local system as at the moment <see cref="P:Yort.Ntp.NtpTimeReceivedEventArgs.CurrentTime"/> was received from the NTP server.
            </summary>
        </member>
    </members>
</doc>
